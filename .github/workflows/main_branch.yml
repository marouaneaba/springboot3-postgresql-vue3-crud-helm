name: Feature
on:
  push:
    branches:
      - main


jobs:
  build:
    runs-on: ubuntu-latest

    if: github.event.pull_request.draft == false
    steps:
      - name: clean
        uses: docker://centos
        if: ${{ always() }}
        continue-on-error: true
        with:
          args: "/bin/rm /github/workspace -rf"

      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          settings-path: ${{ github.workspace }}
          distribution: 'temurin'

      - name: Build with Maven
        working-directory: ./spring-boot3-crud-application
        run: mvn -q clean verify

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Container Registry Europe
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: build the docker image spring
        uses: docker/build-push-action@v4
        with:
          context: ./spring-boot3-crud-application
          dockerfile: ./spring-boot3-crud-application/Dockerfile
          push: true
          build-args: |
            --no-cache
          tags: ${{ secrets.DOCKER_USERNAME }}/spring-boot3-crud-application:${{ github.sha }}

      - name: build the docker image vuejs
        uses: docker/build-push-action@v4
        with:
          context: ./demo-vuejs-3
          dockerfile: ./demo-vuejs-3/Dockerfile
          push: true
          build-args: |
            --no-cache
          tags: ${{ secrets.DOCKER_USERNAME }}/demo-vuejs-3:${{ github.sha }}

      - name: Logout from Docker Hub
        run: |
          docker logout
  deploy:
    needs: build
    runs-on: ubuntu-latest
    env:
      KUBE_NAMESPACE: 'crud-application'
    steps:
      - uses: actions/checkout@v3
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: '431.0.0' # Version du SDK, modifiez si nécessaire
          service_account_key: ${{ secrets.GCP_SA_KEY }} # Clé JSON du compte de service
          project_id: ${{ secrets.GCP_PROJECT_ID }} # ID du projet GCP

      - name: Authenticate to GCP
        env:
          GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
        run: |
          echo "${GCP_SERVICE_ACCOUNT_KEY}" > gcp-key.json
          gcloud auth activate-service-account --key-file=gcp-key.json
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}

      # for helm and kubectl
      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components update --quiet
          gcloud components install gke-gcloud-auth-plugin --quiet

      # Connectez-vous au cluster GKE
      - name: Authenticate to GKE
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} \
            --zone ${{ secrets.GKE_CLUSTER_ZONE }} \
            --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

      - name: Deploy with Helm
        run: |
          helm upgrade --install spring-tests-api ./deploy/app-helm/ -f ./deploy/app-helm/values.yaml \
          --namespace ${{ env.KUBE_NAMESPACE }} \
          --set spring-microservice.image.tag=${{ github.sha }} \
          --set static-web-server.image.tag=${{ github.sha }}
